// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type MutationError interface {
	IsMutationError()
	GetMessage() string
	GetCode() int
}

type QueryError interface {
	IsQueryError()
	GetMessage() string
	GetCode() int
}

type AuthMutationResponse struct {
	Data  *User         `json:"data,omitempty"`
	Error MutationError `json:"error,omitempty"`
}

type AuthQueryResponse struct {
	Data  []*User    `json:"data,omitempty"`
	Error QueryError `json:"error,omitempty"`
}

type AuthToken struct {
	AccessToken string `json:"accessToken"`
}

type AuthorizationError struct {
	Message string `json:"message"`
	Code    int    `json:"code"`
}

func (AuthorizationError) IsQueryError()           {}
func (this AuthorizationError) GetMessage() string { return this.Message }
func (this AuthorizationError) GetCode() int       { return this.Code }

func (AuthorizationError) IsMutationError() {}

type BadRequestError struct {
	Message string `json:"message"`
	Code    int    `json:"code"`
}

func (BadRequestError) IsQueryError()           {}
func (this BadRequestError) GetMessage() string { return this.Message }
func (this BadRequestError) GetCode() int       { return this.Code }

func (BadRequestError) IsMutationError() {}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type NotFoundError struct {
	Message string `json:"message"`
	Code    int    `json:"code"`
}

func (NotFoundError) IsQueryError()           {}
func (this NotFoundError) GetMessage() string { return this.Message }
func (this NotFoundError) GetCode() int       { return this.Code }

func (NotFoundError) IsMutationError() {}

type ServerError struct {
	Message string `json:"message"`
	Code    int    `json:"code"`
}

func (ServerError) IsQueryError()           {}
func (this ServerError) GetMessage() string { return this.Message }
func (this ServerError) GetCode() int       { return this.Code }

func (ServerError) IsMutationError() {}

type UserInput struct {
	Email     string `json:"email"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Password  string `json:"password"`
}

type UserMutation struct {
	CreateUser *AuthMutationResponse `json:"createUser"`
}

type UserQuery struct {
	GetAllUsers *AuthQueryResponse `json:"getAllUsers"`
}

type ValidationError struct {
	Message string `json:"message"`
	Code    int    `json:"code"`
}

func (ValidationError) IsMutationError()        {}
func (this ValidationError) GetMessage() string { return this.Message }
func (this ValidationError) GetCode() int       { return this.Code }

type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
	GenderOthers Gender = "OTHERS"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderOthers,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderOthers:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusInactive UserStatus = "INACTIVE"
	UserStatusActive   UserStatus = "ACTIVE"
)

var AllUserStatus = []UserStatus{
	UserStatusInactive,
	UserStatusActive,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusInactive, UserStatusActive:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserType string

const (
	UserTypeLogicloud UserType = "LOGICLOUD"
	UserTypeStaff     UserType = "STAFF"
	UserTypeAdmin     UserType = "ADMIN"
)

var AllUserType = []UserType{
	UserTypeLogicloud,
	UserTypeStaff,
	UserTypeAdmin,
}

func (e UserType) IsValid() bool {
	switch e {
	case UserTypeLogicloud, UserTypeStaff, UserTypeAdmin:
		return true
	}
	return false
}

func (e UserType) String() string {
	return string(e)
}

func (e *UserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserType", str)
	}
	return nil
}

func (e UserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
