type Sales{
    id:ID!
    product:Product! @goField(forceResolver:true)
    organization:Organization! @goField(forceResolver:true)
    unitsSold:Int!
    soldAt:Float!
    soldBy:User! @goField(forceResolver:true)
    createdAt:Time!
    updatedAt:Time
    deletedAt:Time
}


# Inputs
input CreateSaleInput{
    productID:ID!
    units:Int!
    soldAt:Float!
}
input UpdateSalesInput{
    salesID:ID!
    units:Int
    soldAt:Float
}
input DeleteSalesInput{
    salesID:ID!
}
input FilterSalesParams{
    filterType:SalesInfoType!
    searchQuery:String
    productID:ID
    categoryID:ID
}
input FilterSalesInput{
    params:FilterSalesParams
    page:OffsetPaginationFilter
}
input GetSalesByIDInput{
    salesID:ID!
}
input SalesStatInput{
    categoryID:ID
}

#Response
type SalesMutationResponse{
    id:ID
    data:Sales
    error:MutationError
}

type SalesQueryResponse{
    data:[Sales]
    error:QueryError
    pageInfo: OffsetPageInfo
}
type SaleQueryResponse{
    data:Sales
    error:QueryError
}


# Mutation
type SalesMutation{
    createSales(input:CreateSaleInput!):SalesMutationResponse! @goField(forceResolver:true)
    updateSales(input:UpdateSalesInput!):SalesMutationResponse! @goField(forceResolver:true)
    deleteSales(input:DeleteSalesInput!):SalesMutationResponse! @goField(forceResolver:true)
}

# Query
type SalesQuery{
    getSalesByFilter(input:FilterSalesInput!):SalesQueryResponse! @goField(forceResolver:true)
    getSaleByID(input:GetSalesByIDInput!):SaleQueryResponse! @goField(forceResolver:true)
    getSalesStat(input:SalesStatInput!):SalesStatQueryResponse! @goField(forceResolver:true)
}
