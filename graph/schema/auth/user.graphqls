type User{
    id:ID!
    email:String!
    userType:UserType!
    isVerified:Boolean!
    status:UserStatus!
    password:String!
    createdAt:Time!
    updatedAt:Time
    deletedAt:Time
}

type AuthToken{
    accessToken:String!
}
input UserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

type AuthMutationResponse{
    data:User
    error:MutationError
}

type AuthQueryResponse{
    data:[User]
    error:QueryError
}


type UserMutation{
    createUser(input:UserInput!):AuthMutationResponse! @goField(forceResolver:true)
}

type UserQuery{
    getAllUsers:AuthQueryResponse! @goField(forceResolver:true)
}