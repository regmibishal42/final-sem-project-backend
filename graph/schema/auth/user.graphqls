type User{
    id:ID!
    email:String!
    userType:UserType!
    isVerified:Boolean!
    status:UserStatus!
    profile:Profile @goField(forceResolver:true)
    additionalInformation:AdditionalUserInformation @goField(forceResolver:true)
    createdAt:Time!
    updatedAt:Time
    deletedAt:Time
}

type AdditionalUserInformation{
    isStaff:Boolean
    hasOrganization:Boolean
}

# Inputs
input UserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input GetUserInput{
    id:ID!
}
input userVerificationInput{
    otp:String!
    userID:ID!
}
input UpdatePasswordInput{
    oldPassword:String!
    newPassword:String!
}
input ResetPasswordInput{
    email:String!
    newPassword:String!
    otp:String!
}
input ForgetPasswordInput {
  email: String!
}

#types
type AuthToken{
    accessToken:String!
}

# Response
type AuthMutationResponse{
    data:User
    error:MutationError
}

type AuthQueryResponse{
    data:[User]
    error:QueryError
}
type AuthResponse{
    id:ID
    data:AuthToken
    error:MutationError
}
type RegisterResponse{
    userID:ID
    error:MutationError
}


# Mutations
type UserMutation{
    createUser(input:UserInput!):AuthMutationResponse! @goField(forceResolver:true)
    loginUser(input:LoginInput!):AuthResponse! @goField(forceResolver:true)
    otp:ResendOtpMutation!  @goField(forceResolver:true)
    verifyUser(input:userVerificationInput!):AuthMutationResponse! @goField(forceResolver:true)
    updatePassword(input:UpdatePasswordInput!):AuthMutationResponse! @goField(forceResolver:true)
    forgetPassword(input:ForgetPasswordInput!):RegisterResponse! @goField(forceResolver:true)
    resetPassword(input:ResetPasswordInput!):RegisterResponse! @goField(forceResolver:true)
}

# Queries
type UserQuery{
    getUserDetails(input:GetUserInput):AuthQueryResponse! @goField(forceResolver:true)
}